//
//  SSTStyleKit.m
//  FullScreen
//
//  Created by FullScreen on 6/14/14.
//  Copyright (c) 2014 FullScreen. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "SSTStyleKit.h"


@implementation SSTStyleKit

#pragma mark Cache

static UIColor* _myDarkColor = nil;
static UIColor* _myShadowGradientClearColor = nil;
static UIColor* _myShadowGradientBlackColor = nil;

static PCGradient* _myShadowGradient = nil;

static UIImage* _imageOfClearTopBarBackgroundImage = nil;
static UIImage* _imageOfDarkTopBarBackgroundImage = nil;
static UIImage* _imageOfTopShadow = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _myDarkColor = [UIColor colorWithRed: 0.063 green: 0.337 blue: 0.18 alpha: 1];
    _myShadowGradientClearColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];
    _myShadowGradientBlackColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.5];

    // Gradients Initialization
    CGFloat myShadowGradientLocations[] = {0, 0.6, 1};
    _myShadowGradient = [PCGradient gradientWithColors: @[SSTStyleKit.myShadowGradientBlackColor, [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 0.25], SSTStyleKit.myShadowGradientClearColor] locations: myShadowGradientLocations];

}

#pragma mark Colors

+ (UIColor*)myDarkColor { return _myDarkColor; }
+ (UIColor*)myShadowGradientClearColor { return _myShadowGradientClearColor; }
+ (UIColor*)myShadowGradientBlackColor { return _myShadowGradientBlackColor; }

#pragma mark Gradients

+ (PCGradient*)myShadowGradient { return _myShadowGradient; }

#pragma mark Drawing Methods

+ (void)drawClearTopBarBackgroundImage;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 100)];
    [UIColor.clearColor setFill];
    [rectanglePath fill];
}

+ (void)drawDarkTopBarBackgroundImage;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 100)];
    [SSTStyleKit.myDarkColor setFill];
    [rectanglePath fill];
}

+ (void)drawTopShadow;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 60)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, SSTStyleKit.myShadowGradient.CGGradient, CGPointMake(160, -0), CGPointMake(160, 60), 0);
    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfClearTopBarBackgroundImage;
{
    if (_imageOfClearTopBarBackgroundImage)
        return _imageOfClearTopBarBackgroundImage;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 100), NO, 0.0f);
    [SSTStyleKit drawClearTopBarBackgroundImage];
    _imageOfClearTopBarBackgroundImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfClearTopBarBackgroundImage;
}

+ (UIImage*)imageOfDarkTopBarBackgroundImage;
{
    if (_imageOfDarkTopBarBackgroundImage)
        return _imageOfDarkTopBarBackgroundImage;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 100), NO, 0.0f);
    [SSTStyleKit drawDarkTopBarBackgroundImage];
    _imageOfDarkTopBarBackgroundImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDarkTopBarBackgroundImage;
}

+ (UIImage*)imageOfTopShadow;
{
    if (_imageOfTopShadow)
        return _imageOfTopShadow;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 60), NO, 0.0f);
    [SSTStyleKit drawTopShadow];
    _imageOfTopShadow = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTopShadow;
}

#pragma mark Customization Infrastructure

- (void)setClearTopBarBackgroundImageTargets: (NSArray*)clearTopBarBackgroundImageTargets
{
    _clearTopBarBackgroundImageTargets = clearTopBarBackgroundImageTargets;

    for (id target in self.clearTopBarBackgroundImageTargets)
        [target setImage: SSTStyleKit.imageOfClearTopBarBackgroundImage];
}

- (void)setDarkTopBarBackgroundImageTargets: (NSArray*)darkTopBarBackgroundImageTargets
{
    _darkTopBarBackgroundImageTargets = darkTopBarBackgroundImageTargets;

    for (id target in self.darkTopBarBackgroundImageTargets)
        [target setImage: SSTStyleKit.imageOfDarkTopBarBackgroundImage];
}

- (void)setTopShadowTargets: (NSArray*)topShadowTargets
{
    _topShadowTargets = topShadowTargets;

    for (id target in self.topShadowTargets)
        [target setImage: SSTStyleKit.imageOfTopShadow];
}


@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end
